(ns fooz.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]
    ["/mike" :mike]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to fooz"]
     [:ul
      [:li [:a {:href (path-for :items)} "Items of fooz"]]
      [:li [:a {:href "/borken/link"} "Borken link"]]
      [:li [:a {:href "/mike"} "Mike link"]] ]]))



(defn items-page []
  (fn []
    [:span.main
     [:h1 "The items of fooz"]
     [:ul (map (fn [item-id]
                 [:li {:name (str "item-" item-id) :key (str "item-" item-id)}
                  [:a {:href (path-for :item {:item-id item-id})} "Item: " item-id]])
               (range 1 60))]]))


(defn item-page []
  (fn []
    (let [routing-data (session/get :route)
          item (get-in routing-data [:route-params :item-id])]
      [:span.main
       [:h1 (str "Item " item " of fooz")]
       [:p [:a {:href (path-for :items)} "Back to the list of items"]]])))

(defn about-page []
  (fn [] [:span.main
          [:h1 "About fooz"]
          [:div "funny you should ask. I was walking down the road one day when a man said to me: ..."]
          ]))


(defonce click-count (reagent/atom 0))

(defn state-ful-with-atom []
  [:button {:on-click #(swap! click-count inc)}
   "I have been clicked " @click-count " times."])

(defn random-hsla []
  (str "hsla("
       (* (rand) 360)
       ", 100%, 50%, 1)")
  )

(defn generate-color-map-of-depth [depth]
  (map random-hsla (range depth))
  )

(defn change-colors [depth color-map-atom]
  (swap! color-map-atom #(generate-color-map-of-depth depth))
  )

(defn square-fractal [depth color-map-atom]
  (defn clickHandler [e]
    (.stopPropagation e)
    (change-colors depth color-map-atom)
    )
  (if (< 0 depth)
    [:div {:style {:background-color (nth @color-map-atom (- depth 1)) :width "90%" :height "90%" :display "flex" :justify-content "center" :align-items "center"} :on-click clickHandler} (square-fractal (dec depth) color-map-atom)]
    nil
    ))

(defn mike-page []
  (def fractal-depth 30)
  (def color-map (generate-color-map-of-depth fractal-depth))
  (def color-map-atom (reagent/atom color-map))
  ;; (js/console.log (clj->js color-map))
  (defn scroll-handler [e]
    (.stopPropagation e)
    (.preventDefault e)
    (change-colors fractal-depth color-map-atom)
    )
  [:span.main
    [:h1 "About mike"]
   [:div {
          :style {:width "1000px" :height "1000px" :display "flex" :justify-content "center" :align-items "center"}
          :onWheel scroll-handler
          }
      (square-fractal fractal-depth color-map-atom)]
    [state-ful-with-atom]
    ])


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :items #'items-page
    :item #'item-page
    :mike #'mike-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About fooz"]]]
       [page]
       [:footer
        [:p "fooz was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
